apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "$project.rootDir/tools/lint/lint-plugin.gradle"
apply from: "$project.rootDir/tools/git-versioning.gradle"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId 'com.github.kurtbonatz.kotlinboilerplate'
        minSdkVersion 19
        targetSdkVersion 25
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/proguard/rules-proguard-debug.pro"
        }
        release {
            applicationIdSuffix '.release'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project.rootDir/tools/proguard/rules-proguard.pro"
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        dev {
            versionCode gitVersionCodeTime
            versionName gitVersionName
        }
        prod {
            versionCode gitVersionCode
            versionName gitVersionName
        }
    }

    lintOptions {
        warningsAsErrors false
        abortOnError true

        lintConfig file("lint.xml")
    }

    // Show all test output in the command line!
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }

    sourceSets {
        // Main source set is Kotlin!
        main.java.srcDirs += 'src/main/kotlin'

        // Unit tests
        test.java.srcDir 'src/test/kotlin'

        // Integration tests
        androidTest.java.srcDir 'src/androidTest/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // AppCompat
    compile "com.android.support:appcompat-v7:$android_support_version"
    compile "com.android.support:design:$android_support_version"
    compile "com.android.support:recyclerview-v7:$android_support_version"
    compile "com.android.support:support-v4:$android_support_version"
    compile "com.android.support:cardview-v7:$android_support_version"
    compile "com.android.support:support-annotations:$android_support_version"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    // Dagger 2
    compile "com.google.dagger:dagger:$dagger_version"
    compile "com.google.dagger:dagger-android:$dagger_version"
    compile "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compile 'com.squareup.moshi:moshi:1.4.0'

    // Logging
    compile 'com.jakewharton.timber:timber:4.5.1'

    // Image library
    compile 'com.squareup.picasso:picasso:2.5.2'

    // RxJava 2 + Kotlin
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'io.reactivex.rxjava2:rxkotlin:2.0.1-RC1'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Testing
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.7.22'
}
repositories {
    mavenCentral()
}

// Signing Config code
// From https://gist.github.com/gabrielemariotti/6856974
def props = new Properties()
def propFile = new File('.siging/signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
